// api/amo-dp-webhook.js
// Vercel Edge/Node function: –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª—è–µ—Ç access_token, —Ç—è–Ω–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏ —à–ª—ë—Ç –∫—Ä–∞—Å–∏–≤–æ –≤ Telegram

const {
  AMO_CLIENT_ID,
  AMO_CLIENT_SECRET,
  AMO_REDIRECT_URI,
  AMO_REFRESH_TOKEN: ENV_REFRESH,
  AMO_ACCESS_TOKEN: ENV_ACCESS, // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
  AMO_SUBDOMAIN,
  AMO_API_DOMAIN,
  SECRET_TOKEN,

  TELEGRAM_BOT_TOKEN,
  TELEGRAM_CHAT_ID,

  // –∑–∞–ø–∞—Å–Ω—ã–µ –∏–º–µ–Ω–∞, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å TG_*
  TG_BOT_TOKEN,
  TG_CHAT_ID,

  FIELD_DOOR_TYPE_ID = '2094731',
  FIELD_CITY_ID = '2094733',
} = process.env;

// –∫–µ—à –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è ¬´—Ç—ë–ø–ª–æ–π¬ª —Ñ—É–Ω–∫—Ü–∏–∏ (Vercel —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ä–∞–º–∫–∞—Ö –∏–Ω—Å—Ç–∞–Ω—Å–∞)
let cachedAccessToken = ENV_ACCESS || '';
let cachedRefreshToken = ENV_REFRESH || '';

const BOT_TOKEN = TELEGRAM_BOT_TOKEN || TG_BOT_TOKEN;
const CHAT_ID = TELEGRAM_CHAT_ID || TG_CHAT_ID;

function log(level, ...args) {
  console[level](`[amo-dp]`, ...args);
}

async function sendTelegram(text) {
  if (!BOT_TOKEN || !CHAT_ID) {
    log('error', 'TG env missing; BOT_TOKEN/CHAT_ID');
    return { ok: false, note: 'tg env missing' };
  }
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
  const resp = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: /^\-?\d+$/.test(String(CHAT_ID)) ? Number(CHAT_ID) : CHAT_ID,
      text,
      disable_web_page_preview: true,
    }),
  });
  let data = null;
  try { data = await resp.json(); } catch {}
  log('info', 'TG RESP:', resp.status, data);
  return data || { ok: false };
}

async function parseBody(req) {
  const ctype = req.headers.get('content-type') || '';
  if (ctype.includes('application/json')) {
    return await req.json(); // digital pipeline –º–æ–∂–µ—Ç —Ç–∞–∫ –ø—Ä–∏—Å–ª–∞—Ç—å
  }
  // amo —á–∞—â–µ —à–ª—ë—Ç form-urlencoded
  const text = await req.text();
  const params = new URLSearchParams(text);
  const obj = Object.create(null);
  for (const [k, v] of params.entries()) obj[k] = v;
  return obj;
}

function extractLeadEvent(raw) {
  // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: form –∏ json
  if (raw?.leads?.status) {
    // JSON –≤–∏–¥–∞ { leads: { status: [ {...} ] } }
    const s = raw.leads.status[0];
    return {
      id: String(s?.id || ''),
      pipeline_id: String(s?.pipeline_id || ''),
      status_id: String(s?.status_id || ''),
      old_status_id: String(s?.old_status_id || ''),
    };
  }
  // form-urlencoded
  const id = raw['leads[status][0][id]'];
  const pipeline_id = raw['leads[status][0][pipeline_id]'];
  const status_id = raw['leads[status][0][status_id]'];
  const old_status_id = raw['leads[status][0][old_status_id]'];
  return { id, pipeline_id, status_id, old_status_id };
}

function leadUrl(leadId) {
  // UI-—Å—Å—ã–ª–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å—É–±–¥–æ–º–µ–Ω
  return `https://${AMO_SUBDOMAIN}.amocrm.ru/leads/detail/${leadId}`;
}

async function refreshAccessToken() {
  if (!cachedRefreshToken) throw new Error('No refresh token in env');
  const url = `https://${AMO_SUBDOMAIN}.amocrm.ru/oauth2/access_token`;
  const body = {
    client_id: AMO_CLIENT_ID,
    client_secret: AMO_CLIENT_SECRET,
    grant_type: 'refresh_token',
    refresh_token: cachedRefreshToken,
    redirect_uri: AMO_REDIRECT_URI,
  };
  const resp = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body),
  });

  const json = await resp.json().catch(() => ({}));
  if (!resp.ok) {
    log('error', 'REFRESH FAIL', resp.status, json);
    throw new Error('refresh_failed');
  }

  const newAccess = json.access_token;
  const newRefresh = json.refresh_token;
  if (!newAccess) throw new Error('refresh_missing_access');

  cachedAccessToken = newAccess;
  if (newRefresh && newRefresh !== cachedRefreshToken) {
    const mask = (s) => s ? `${s.slice(0, 6)}‚Ä¶${s.slice(-6)}` : '';
    log('info', `REFRESH ROTATED ‚Üí update AMO_REFRESH_TOKEN in Vercel: ${mask(newRefresh)}`);
    cachedRefreshToken = newRefresh;
  }
  log('info', 'TOKEN REFRESHED');
  return cachedAccessToken;
}

async function amoFetch(path, init = {}, allowRefresh = true) {
  if (!AMO_API_DOMAIN) throw new Error('AMO_API_DOMAIN required');
  const url = `https://${AMO_API_DOMAIN}${path}`;

  // –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–±—É–µ–º —Å —Ç–µ–∫—É—â–∏–º access; –µ—Å–ª–∏ 401 ‚Äî —Ä–µ—Ñ—Ä–µ—à–∏–º—Å—è –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
  const doFetch = async (token) => fetch(url, {
    ...init,
    headers: {
      ...(init.headers || {}),
      Authorization: `Bearer ${token}`,
      'Content-Type': 'application/json',
    },
  });

  let token = cachedAccessToken;
  if (!token && cachedRefreshToken) {
    try { token = await refreshAccessToken(); } catch (e) { /* fallthrough */ }
  }
  let resp = await doFetch(token || '');
  if (resp.status === 401 && allowRefresh && cachedRefreshToken) {
    await refreshAccessToken();
    resp = await doFetch(cachedAccessToken);
  }
  return resp;
}

function pickCfValue(custom_fields_values = [], cfIdStr) {
  const cfId = Number(cfIdStr);
  const field = custom_fields_values.find((f) => Number(f.field_id) === cfId);
  if (!field || !Array.isArray(field.values) || !field.values.length) return '‚Äî';
  const v = field.values[0];
  // –ø–æ–¥–¥–µ—Ä–∂–∏–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∏ ¬´—ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–æ–≤¬ª
  return v.value ?? v.enum ?? '‚Äî';
}

async function buildPrettyMessage(leadId) {
  // 1) —Å–¥–µ–ª–∫–∞
  const leadResp = await amoFetch(`/api/v4/leads/${leadId}?with=contacts`);
  const leadJson = await leadResp.json().catch(() => ({}));
  log('info', 'LEAD RESP STATUS:', leadResp.status);
  if (!leadResp.ok) {
    log('error', 'LEAD RESP BODY:', leadJson);
    throw new Error('lead_fetch_failed');
  }

  const name = leadJson.name || `–°–¥–µ–ª–∫–∞ #${leadId}`;
  const respUserId = leadJson.responsible_user_id;
  const doorType = pickCfValue(leadJson.custom_fields_values, FIELD_DOOR_TYPE_ID);
  const city     = pickCfValue(leadJson.custom_fields_values, FIELD_CITY_ID);

  // 2) –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
  let manager = '‚Äî';
  if (respUserId) {
    const userResp = await amoFetch(`/api/v4/users/${respUserId}`);
    const userJson = await userResp.json().catch(() => ({}));
    log('info', 'USER RESP STATUS:', userResp.status);
    if (userResp.ok) {
      manager = userJson.name || userJson.email || String(respUserId);
    } else {
      log('error', 'USER RESP BODY:', userJson);
    }
  }

  const url = leadUrl(leadId);
  return [
    'üö® –£–ø–∞–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
    '–ü—Ä–æ—Å—å–±–∞ —Å—Ä–æ—á–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É.',
    '',
    `–°–¥–µ–ª–∫–∞: ${name}`,
    `–°—Å—ã–ª–∫–∞: ${url}`,
    `–ú–µ–Ω–µ–¥–∂–µ—Ä: ${manager}`,
    `–¢–∏–ø –¥–≤–µ—Ä–∏: ${doorType}`,
    `–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: ${city}`,
  ].join('\n');
}

export default async function handler(req, res) {
  try {
    if (req.method !== 'POST') return res.status(405).end();

    // –∑–∞—â–∏—Ç–∞ –ø–æ —Å–µ–∫—Ä–µ—Ç—É (query ?token=‚Ä¶)
    const okSecret = !SECRET_TOKEN || (req.query?.token === SECRET_TOKEN);
    if (!okSecret) return res.status(401).json({ ok: false, error: 'bad token' });

    const raw = await parseBody(req);
    log('info', 'AMO RAW:', raw);

    const ev = extractLeadEvent(raw);
    const leadId = ev.id;
    if (!leadId) return res.status(200).json({ ok: true, note: 'no lead id' });

    // 1) –º–∏–Ω–∏–º–∞–ª–∫–∞ ‚Äî —á—Ç–æ–±—ã —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ API –ª—è–∂–µ—Ç
    const minimal = [
      '‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏',
      `Deal #${leadId}`,
      `Pipeline: ${ev.pipeline_id}`,
      `Status: ${ev.old_status_id} ‚Üí ${ev.status_id}`,
      leadUrl(leadId),
    ].join('\n');
    await sendTelegram(minimal);

    // 2) –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try {
      const text = await buildPrettyMessage(leadId);
      await sendTelegram(text);
      return res.status(200).json({ ok: true });
    } catch (e) {
      log('error', 'pretty build failed:', e?.message || e);
      return res.status(200).json({ ok: false, error: 'exception_after_minimal' });
    }
  } catch (e) {
    log('error', 'hook error', e);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã amo –Ω–µ ¬´—Ç–µ—Ä—è–ª¬ª —Å–æ–±—ã—Ç–∏–µ
    return res.status(200).json({ ok: false });
  }
}
