// api/amo-dp-webhook.js

// ====== MAIN HANDLER ======
export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).end();

  // 0) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ –≤ URL (‚Ä¶/amo-dp-webhook?token=XXX)
  const okSecret = !process.env.SECRET_TOKEN || req.query.token === process.env.SECRET_TOKEN;
  if (!okSecret) {
    console.warn('BAD SECRET');
    return res.status(401).json({ ok: false, error: 'bad token' });
  }

  try {
    // 1) amoCRM —à–ª—ë—Ç x-www-form-urlencoded ‚Äî –Ω–∞ Vercel —É–∂–µ –ø–∞—Ä—Å–∏—Ç—Å—è –≤ –æ–±—ä–µ–∫—Ç
    const raw = req.body || {};
    console.log('AMO RAW:', raw);

    // 2) –°–æ–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –∫–ª—é—á–µ–π leads[status][0][...]
    const ev = extractStatusEvent(raw);
    if (!ev?.id) {
      console.log('AMO HOOK: no events');
      return res.status(200).json({ ok: true, note: 'no events' });
    }

    const leadId = String(ev.id);
    const amoApi = `https://${process.env.AMO_API_DOMAIN || (process.env.AMO_SUBDOMAIN + '.amocrm.ru')}`; // –¥–ª—è API
    const amoUi  = `https://${process.env.AMO_SUBDOMAIN}.amocrm.ru`;                                     // –¥–ª—è —Å—Å—ã–ª–æ–∫
    const leadUrl = `${amoUi}/leads/detail/${leadId}`;

    // 3) –û—Ç–ø—Ä–∞–≤–∏–º –ú–ò–ù–ò-–°–û–û–ë–©–ï–ù–ò–ï —Å—Ä–∞–∑—É (—á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å)
    const minimalText =
      `‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏\n` +
      `Deal #${leadId}\n` +
      `Pipeline: ${ev.pipeline_id}\n` +
      `Status: ${ev.old_status_id} ‚Üí ${ev.status_id}\n` +
      `${leadUrl}`;
    await sendToTelegram(minimalText);

    // 4) –ë–µ—Ä—ë–º access_token (–∏–∑ ENV, –∞ –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ä–µ—Ñ—Ä–µ—à–µ–º)
    const accessToken = await getAccessToken(amoApi);
    if (!accessToken) {
      console.error('TOKEN: no access_token ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ');
      return res.status(200).json({ ok: true, note: 'sent minimal, no token' });
    }
    console.log('TOKEN OK');

    // 5) –¢—è–Ω–µ–º —Å–¥–µ–ª–∫—É
    const leadResp = await fetch(`${amoApi}/api/v4/leads/${leadId}?with=contacts`, {
      headers: { Authorization: `Bearer ${accessToken}` }
    });
    const leadJson = await leadResp.json();
    console.log('LEAD RESP STATUS:', leadResp.status);
    if (!leadResp.ok) {
      console.error('LEAD RESP BODY:', leadJson);
      return res.status(200).json({ ok: true, note: 'sent minimal, lead fetch failed' });
    }

    // 6) –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
    let manager = '‚Äî';
    if (leadJson.responsible_user_id) {
      const userResp = await fetch(`${amoApi}/api/v4/users/${leadJson.responsible_user_id}`, {
        headers: { Authorization: `Bearer ${accessToken}` }
      });
      const userJson = await userResp.json();
      console.log('USER RESP STATUS:', userResp.status);
      if (userResp.ok) manager = userJson?.name || `ID ${leadJson.responsible_user_id}`;
      else console.warn('USER RESP BODY:', userJson);
    }

    // 7) –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è
    const getCf = (id) => {
      const arr = leadJson.custom_fields_values || [];
      const f = arr.find((x) => String(x.field_id) === String(id));
      if (!f?.values?.length) return '';
      return f.values[0].value ?? f.values[0].enum_id ?? '';
    };
    const doorTypeId = process.env.FIELD_DOOR_TYPE_ID || 2094731;
    const cityId     = process.env.FIELD_CITY_ID || 2094733;

    const doorType = getCf(doorTypeId);
    const city     = getCf(cityId);
    const leadName = leadJson.name || `–°–¥–µ–ª–∫–∞ #${leadId}`;

    // 8) –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const pretty =
      `üö® –£–ø–∞–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ\n` +
      `–ü—Ä–æ—Å—å–±–∞ —Å—Ä–æ—á–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É.\n\n` +
      `–°–¥–µ–ª–∫–∞: ${leadName}\n` +
      `–°—Å—ã–ª–∫–∞: ${leadUrl}\n` +
      `–ú–µ–Ω–µ–¥–∂–µ—Ä: ${manager}\n` +
      `–¢–∏–ø –¥–≤–µ—Ä–∏: ${doorType || '‚Äî'}\n` +
      `–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏: ${city || '‚Äî'}`;

    await sendToTelegram(pretty);
    return res.status(200).json({ ok: true, note: 'sent minimal+pretty' });

  } catch (e) {
    console.error('hook error', e);
    // –º–∏–Ω–∏–º–∞–ª–∫—É –º—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—ã—à–µ ‚Äî –Ω–µ —Ç–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    return res.status(200).json({ ok: false, error: 'exception_after_minimal' });
  }
}

// ====== HELPERS ======
function extractStatusEvent(raw) {
  const statuses = [];
  for (const k of Object.keys(raw)) {
    const m = k.match(/^leads\[status]\[(\d+)]\[(id|pipeline_id|status_id|old_status_id|old_pipeline_id)]$/);
    if (!m) continue;
    const idx = Number(m[1]);
    const field = m[2];
    statuses[idx] ??= {};
    statuses[idx][field] = raw[k];
  }
  return statuses[0];
}

async function getAccessToken(amoApiBase) {
  // 1) –ï—Å–ª–∏ –ø–æ–ª–æ–∂–µ–Ω –≤—Ä—É—á–Ω—É—é (–≤—Ä–µ–º–µ–Ω–Ω–æ) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (process.env.AMO_ACCESS_TOKEN) return process.env.AMO_ACCESS_TOKEN;

  // 2) –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ refresh_token
  try {
    const body = {
      client_id: process.env.AMO_CLIENT_ID,
      client_secret: process.env.AMO_CLIENT_SECRET,
      grant_type: 'refresh_token',
      refresh_token: process.env.AMO_REFRESH_TOKEN,
      redirect_uri: process.env.AMO_REDIRECT_URI
    };
    const resp = await fetch(`${amoApiBase}/oauth2/access_token`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });
    const json = await resp.json();
    if (!resp.ok || !json.access_token) {
      console.error('TOKEN RESP', resp.status, json);
      return null;
    }
    console.log('TOKEN REFRESHED');
    // json.refresh_token —Ç—É—Ç ‚Äî –ù–û–í–´–ô (—Ä–æ—Ç–∞—Ü–∏—è). –í –ø—Ä–æ–¥–µ –ª—É—á—à–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –µ–≥–æ –≥–¥–µ-—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.
    return json.access_token;
  } catch (e) {
    console.error('TOKEN ERROR', e);
    return null;
  }
}

async function sendToTelegram(text) {
  try {
    const tgUrl = `https://api.telegram.org/bot${process.env.TG_BOT_TOKEN}/sendMessage`;
    const resp = await fetch(tgUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: process.env.TG_CHAT_ID,
        text,
        disable_web_page_preview: true
      })
    });
    const json = await resp.json();
    console.log('TG RESP:', resp.status, json);
  } catch (e) {
    console.error('TG ERROR', e);
  }
}
